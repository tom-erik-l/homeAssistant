homeassistant:
  customize:
    package.node_anchors:
      counters: &counters
        entity_id:
          - counter.stue
          - counter.spisestue
          - counter.kokken
          - counter.sovevaerelse
          - counter.badevaerelselse
          - counter.gang
          - counter.noop

      lights: &lights
        entity_id:
          - light.stue
          - light.spisestue
          - light.kokken
          - light.sovevaerelse
          - light.badevaerelse
          - light.gang

      switches: &switches
        entity_id:
          - switch.circadian_lighting_stue
          - switch.circadian_lighting_spisestue
          - switch.circadian_lighting_kokken
          - switch.circadian_lighting_sovevaerelse
          - switch.circadian_lighting_badevaerelse
          - switch.circadian_lighting_gang

automation:
  - id: hass_startup
    alias: 'Hass startup'
    trigger:
    - platform: homeassistant
      event: start
    action:
    # Ensure that the Circadian Lights are enabled after rebooting HASS
    - service: switch.turn_on
      data: *switches
    # Ensure that all counters are reset after rebooting HASS
    - service: counter.reset
      data: *counters

  - alias: 'resetLightToggleCounter'
    # Reset the counter every 10 seconds
    initial_state: "on"
    trigger:
    - platform: time_pattern
      seconds: /10
    action:
    - service: counter.reset
      data: *counters

  - alias: "incrementCounter"
    # Increment the light counter if a light switches from off to on IF the boolean "disableincrement" == "off"
    initial_state: "on"
    trigger:
    - platform: state
      <<: *lights
      from: "off"
      to: "on"
    condition:
    - condition: state
      entity_id: input_boolean.disableincrement
      state: "off"
    action:
    - service: counter.increment
      data_template:
        entity_id: >
          {% if trigger.entity_id == 'light.stue' %}
            counter.stue
          {% elif trigger.entity_id == 'light.spisestue' %}
            counter.spisestue
          {% elif trigger.entity_id == 'light.badevaerelse' %}
            counter.badevaerelse
          {% elif trigger.entity_id == 'light.gang' %}
            counter.gang
          {% elif trigger.entity_id == 'light.kokken' %}
            counter.kokken
          {% elif trigger.entity_id == 'light.sovevaerelse' %}
            counter.sovevaerelse
          {% else %}
            counter.noop
          {% endif %}


  - alias: "toggleManualOverride"
    # Enable manual override of Circadian lights IF counter > 2:
    initial_state: "on"

    trigger:
    - platform: numeric_state
      <<: *counters
      above: 2
      # below: 5

    # variables:

    action:
      - choose:

        - conditions:
          # If the Circadian lights are "on" then turn them "off"
          - condition: state
            entity_id: switch.circadian_lighting_stue
            state: "on"
          sequence:
            - service: switch.turn_off
              entity_id: switch.circadian_lighting_stue
              # Turn on boolean "disableincrement" to prevent additional toggles from increasing the counter
            - service: input_boolean.turn_on
              entity_id: input_boolean.disableincrement
            - service: light.turn_on
              data:
                entity_id: light.hele_stue
                transition: 2
                # color_temp: 6000
                brightness_pct: 100
            - service: counter.reset
              entity_id: counter.stue
            # Turn off boolean "disableincrement" to again allow additional toggles to increase the counter
            - service: input_boolean.turn_off
              entity_id: input_boolean.disableincrement

        - conditions:
          # If the Circadian lights are "off" then turn them "on"
          - condition: state
            entity_id: switch.circadian_lighting_stue
            state: "off"
          sequence:
            - service: switch.turn_on
              entity_id: switch.circadian_lighting_stue


